//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFStreamingServiceAndClientApi.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1", CallbackContract=typeof(WCFStreamingServiceAndClientApi.ServiceReference1.IService1Callback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/MyOperation1", ReplyAction="http://tempuri.org/IService1/MyOperation1Response")]
        string MyOperation1(string myValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/MyOperation1", ReplyAction="http://tempuri.org/IService1/MyOperation1Response")]
        System.Threading.Tasks.Task<string> MyOperation1Async(string myValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/MyOperation2", ReplyAction="http://tempuri.org/IService1/MyOperation2Response")]
        string MyOperation2(ServiceLibrary.DataContract1 dataContractValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/MyOperation2", ReplyAction="http://tempuri.org/IService1/MyOperation2Response")]
        System.Threading.Tasks.Task<string> MyOperation2Async(ServiceLibrary.DataContract1 dataContractValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/HelloWorld", ReplyAction="http://tempuri.org/IService1/HelloWorldResponse")]
        string HelloWorld(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/HelloWorld", ReplyAction="http://tempuri.org/IService1/HelloWorldResponse")]
        System.Threading.Tasks.Task<string> HelloWorldAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/StartWatch", ReplyAction="http://tempuri.org/IService1/StartWatchResponse")]
        string StartWatch(string PathToWatch, string Filter, bool IncludeSubdirectories);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/StartWatch", ReplyAction="http://tempuri.org/IService1/StartWatchResponse")]
        System.Threading.Tasks.Task<string> StartWatchAsync(string PathToWatch, string Filter, bool IncludeSubdirectories);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/StopWatch", ReplyAction="http://tempuri.org/IService1/StopWatchResponse")]
        string StopWatch();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/StopWatch", ReplyAction="http://tempuri.org/IService1/StopWatchResponse")]
        System.Threading.Tasks.Task<string> StopWatchAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ConnectToFileServer", ReplyAction="http://tempuri.org/IService1/ConnectToFileServerResponse")]
        string ConnectToFileServer(string ipAddress, string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ConnectToFileServer", ReplyAction="http://tempuri.org/IService1/ConnectToFileServerResponse")]
        System.Threading.Tasks.Task<string> ConnectToFileServerAsync(string ipAddress, string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UploadFileToServer", ReplyAction="http://tempuri.org/IService1/UploadFileToServerResponse")]
        string UploadFileToServer(string FileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UploadFileToServer", ReplyAction="http://tempuri.org/IService1/UploadFileToServerResponse")]
        System.Threading.Tasks.Task<string> UploadFileToServerAsync(string FileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Close", ReplyAction="http://tempuri.org/IService1/CloseResponse")]
        string Close();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Close", ReplyAction="http://tempuri.org/IService1/CloseResponse")]
        System.Threading.Tasks.Task<string> CloseAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RefreshFileList", ReplyAction="http://tempuri.org/IService1/RefreshFileListResponse")]
        string[] RefreshFileList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RefreshFileList", ReplyAction="http://tempuri.org/IService1/RefreshFileListResponse")]
        System.Threading.Tasks.Task<string[]> RefreshFileListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/StartWCFStreamingServer", ReplyAction="http://tempuri.org/IService1/StartWCFStreamingServerResponse")]
        string StartWCFStreamingServer(string ipAddress, int port, string storageFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/StartWCFStreamingServer", ReplyAction="http://tempuri.org/IService1/StartWCFStreamingServerResponse")]
        System.Threading.Tasks.Task<string> StartWCFStreamingServerAsync(string ipAddress, int port, string storageFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteAllFilesOnServer", ReplyAction="http://tempuri.org/IService1/DeleteAllFilesOnServerResponse")]
        int DeleteAllFilesOnServer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteAllFilesOnServer", ReplyAction="http://tempuri.org/IService1/DeleteAllFilesOnServerResponse")]
        System.Threading.Tasks.Task<int> DeleteAllFilesOnServerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CloseWCFStreamingServer", ReplyAction="http://tempuri.org/IService1/CloseWCFStreamingServerResponse")]
        string CloseWCFStreamingServer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CloseWCFStreamingServer", ReplyAction="http://tempuri.org/IService1/CloseWCFStreamingServerResponse")]
        System.Threading.Tasks.Task<string> CloseWCFStreamingServerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetWCFStreamingServerRepositoryFolder", ReplyAction="http://tempuri.org/IService1/SetWCFStreamingServerRepositoryFolderResponse")]
        string SetWCFStreamingServerRepositoryFolder(string storageFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetWCFStreamingServerRepositoryFolder", ReplyAction="http://tempuri.org/IService1/SetWCFStreamingServerRepositoryFolderResponse")]
        System.Threading.Tasks.Task<string> SetWCFStreamingServerRepositoryFolderAsync(string storageFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DropBoxInitialize", ReplyAction="http://tempuri.org/IService1/DropBoxInitializeResponse")]
        string DropBoxInitialize();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DropBoxInitialize", ReplyAction="http://tempuri.org/IService1/DropBoxInitializeResponse")]
        System.Threading.Tasks.Task<string> DropBoxInitializeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DropBoxClose", ReplyAction="http://tempuri.org/IService1/DropBoxCloseResponse")]
        string DropBoxClose();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DropBoxClose", ReplyAction="http://tempuri.org/IService1/DropBoxCloseResponse")]
        System.Threading.Tasks.Task<string> DropBoxCloseAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DropBoxUpload", ReplyAction="http://tempuri.org/IService1/DropBoxUploadResponse")]
        string DropBoxUpload(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DropBoxUpload", ReplyAction="http://tempuri.org/IService1/DropBoxUploadResponse")]
        System.Threading.Tasks.Task<string> DropBoxUploadAsync(string fileName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Callback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/NotifyCallbackMessage")]
        void NotifyCallbackMessage(string ipAddress, int code, string Msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/NotifyDataCallback")]
        void NotifyDataCallback(string ipAddress, byte[] buf, int size);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WCFStreamingServiceAndClientApi.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.DuplexClientBase<WCFStreamingServiceAndClientApi.ServiceReference1.IService1>, WCFStreamingServiceAndClientApi.ServiceReference1.IService1 {
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string MyOperation1(string myValue) {
            return base.Channel.MyOperation1(myValue);
        }
        
        public System.Threading.Tasks.Task<string> MyOperation1Async(string myValue) {
            return base.Channel.MyOperation1Async(myValue);
        }
        
        public string MyOperation2(ServiceLibrary.DataContract1 dataContractValue) {
            return base.Channel.MyOperation2(dataContractValue);
        }
        
        public System.Threading.Tasks.Task<string> MyOperation2Async(ServiceLibrary.DataContract1 dataContractValue) {
            return base.Channel.MyOperation2Async(dataContractValue);
        }
        
        public string HelloWorld(string str) {
            return base.Channel.HelloWorld(str);
        }
        
        public System.Threading.Tasks.Task<string> HelloWorldAsync(string str) {
            return base.Channel.HelloWorldAsync(str);
        }
        
        public string StartWatch(string PathToWatch, string Filter, bool IncludeSubdirectories) {
            return base.Channel.StartWatch(PathToWatch, Filter, IncludeSubdirectories);
        }
        
        public System.Threading.Tasks.Task<string> StartWatchAsync(string PathToWatch, string Filter, bool IncludeSubdirectories) {
            return base.Channel.StartWatchAsync(PathToWatch, Filter, IncludeSubdirectories);
        }
        
        public string StopWatch() {
            return base.Channel.StopWatch();
        }
        
        public System.Threading.Tasks.Task<string> StopWatchAsync() {
            return base.Channel.StopWatchAsync();
        }
        
        public string ConnectToFileServer(string ipAddress, string UserName, string Password) {
            return base.Channel.ConnectToFileServer(ipAddress, UserName, Password);
        }
        
        public System.Threading.Tasks.Task<string> ConnectToFileServerAsync(string ipAddress, string UserName, string Password) {
            return base.Channel.ConnectToFileServerAsync(ipAddress, UserName, Password);
        }
        
        public string UploadFileToServer(string FileName) {
            return base.Channel.UploadFileToServer(FileName);
        }
        
        public System.Threading.Tasks.Task<string> UploadFileToServerAsync(string FileName) {
            return base.Channel.UploadFileToServerAsync(FileName);
        }
        
        public string Close() {
            return base.Channel.Close();
        }
        
        public System.Threading.Tasks.Task<string> CloseAsync() {
            return base.Channel.CloseAsync();
        }
        
        public string[] RefreshFileList() {
            return base.Channel.RefreshFileList();
        }
        
        public System.Threading.Tasks.Task<string[]> RefreshFileListAsync() {
            return base.Channel.RefreshFileListAsync();
        }
        
        public string StartWCFStreamingServer(string ipAddress, int port, string storageFolder) {
            return base.Channel.StartWCFStreamingServer(ipAddress, port, storageFolder);
        }
        
        public System.Threading.Tasks.Task<string> StartWCFStreamingServerAsync(string ipAddress, int port, string storageFolder) {
            return base.Channel.StartWCFStreamingServerAsync(ipAddress, port, storageFolder);
        }
        
        public int DeleteAllFilesOnServer() {
            return base.Channel.DeleteAllFilesOnServer();
        }
        
        public System.Threading.Tasks.Task<int> DeleteAllFilesOnServerAsync() {
            return base.Channel.DeleteAllFilesOnServerAsync();
        }
        
        public string CloseWCFStreamingServer() {
            return base.Channel.CloseWCFStreamingServer();
        }
        
        public System.Threading.Tasks.Task<string> CloseWCFStreamingServerAsync() {
            return base.Channel.CloseWCFStreamingServerAsync();
        }
        
        public string SetWCFStreamingServerRepositoryFolder(string storageFolder) {
            return base.Channel.SetWCFStreamingServerRepositoryFolder(storageFolder);
        }
        
        public System.Threading.Tasks.Task<string> SetWCFStreamingServerRepositoryFolderAsync(string storageFolder) {
            return base.Channel.SetWCFStreamingServerRepositoryFolderAsync(storageFolder);
        }
        
        public string DropBoxInitialize() {
            return base.Channel.DropBoxInitialize();
        }
        
        public System.Threading.Tasks.Task<string> DropBoxInitializeAsync() {
            return base.Channel.DropBoxInitializeAsync();
        }
        
        public string DropBoxClose() {
            return base.Channel.DropBoxClose();
        }
        
        public System.Threading.Tasks.Task<string> DropBoxCloseAsync() {
            return base.Channel.DropBoxCloseAsync();
        }
        
        public string DropBoxUpload(string fileName) {
            return base.Channel.DropBoxUpload(fileName);
        }
        
        public System.Threading.Tasks.Task<string> DropBoxUploadAsync(string fileName) {
            return base.Channel.DropBoxUploadAsync(fileName);
        }
    }
}
