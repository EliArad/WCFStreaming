//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GojiWCFStreamingBaseApi.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService", CallbackContract=typeof(GojiWCFStreamingBaseApi.ServiceReference1.IServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/HelloWorld", ReplyAction="http://tempuri.org/IService/HelloWorldResponse")]
        string HelloWorld(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/HelloWorld", ReplyAction="http://tempuri.org/IService/HelloWorldResponse")]
        System.Threading.Tasks.Task<string> HelloWorldAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/IsCopyThreadIsAlive", ReplyAction="http://tempuri.org/IService/IsCopyThreadIsAliveResponse")]
        bool IsCopyThreadIsAlive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/IsCopyThreadIsAlive", ReplyAction="http://tempuri.org/IService/IsCopyThreadIsAliveResponse")]
        System.Threading.Tasks.Task<bool> IsCopyThreadIsAliveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CloseCopyThread", ReplyAction="http://tempuri.org/IService/CloseCopyThreadResponse")]
        void CloseCopyThread();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CloseCopyThread", ReplyAction="http://tempuri.org/IService/CloseCopyThreadResponse")]
        System.Threading.Tasks.Task CloseCopyThreadAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Echo", ReplyAction="http://tempuri.org/IService/EchoResponse")]
        void Echo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Echo", ReplyAction="http://tempuri.org/IService/EchoResponse")]
        System.Threading.Tasks.Task EchoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Ping", ReplyAction="http://tempuri.org/IService/PingResponse")]
        string Ping();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Ping", ReplyAction="http://tempuri.org/IService/PingResponse")]
        System.Threading.Tasks.Task<string> PingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetVerbose", ReplyAction="http://tempuri.org/IService/SetVerboseResponse")]
        void SetVerbose(bool s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetVerbose", ReplyAction="http://tempuri.org/IService/SetVerboseResponse")]
        System.Threading.Tasks.Task SetVerboseAsync(bool s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDrivesInfo", ReplyAction="http://tempuri.org/IService/GetDrivesInfoResponse")]
        System.IO.DriveInfo[] GetDrivesInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDrivesInfo", ReplyAction="http://tempuri.org/IService/GetDrivesInfoResponse")]
        System.Threading.Tasks.Task<System.IO.DriveInfo[]> GetDrivesInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetVerbose", ReplyAction="http://tempuri.org/IService/GetVerboseResponse")]
        bool GetVerbose();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetVerbose", ReplyAction="http://tempuri.org/IService/GetVerboseResponse")]
        System.Threading.Tasks.Task<bool> GetVerboseAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/MarkLastFileAsUploaded", ReplyAction="http://tempuri.org/IService/MarkLastFileAsUploadedResponse")]
        string MarkLastFileAsUploaded(string TargetPath, string VirtualPath, ulong currentUploadedG360Index, string currentUploadedFileOwner, long currentSizeOfFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/MarkLastFileAsUploaded", ReplyAction="http://tempuri.org/IService/MarkLastFileAsUploadedResponse")]
        System.Threading.Tasks.Task<string> MarkLastFileAsUploadedAsync(string TargetPath, string VirtualPath, ulong currentUploadedG360Index, string currentUploadedFileOwner, long currentSizeOfFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCurrentUploadedFileInfo", ReplyAction="http://tempuri.org/IService/GetCurrentUploadedFileInfoResponse")]
        string GetCurrentUploadedFileInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCurrentUploadedFileInfo", ReplyAction="http://tempuri.org/IService/GetCurrentUploadedFileInfoResponse")]
        System.Threading.Tasks.Task<string> GetCurrentUploadedFileInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetClientGuid", ReplyAction="http://tempuri.org/IService/GetClientGuidResponse")]
        string GetClientGuid();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetClientGuid", ReplyAction="http://tempuri.org/IService/GetClientGuidResponse")]
        System.Threading.Tasks.Task<string> GetClientGuidAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/OpenTCPStreamingClient", ReplyAction="http://tempuri.org/IService/OpenTCPStreamingClientResponse")]
        string OpenTCPStreamingClient(string ipAddress, string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/OpenTCPStreamingClient", ReplyAction="http://tempuri.org/IService/OpenTCPStreamingClientResponse")]
        System.Threading.Tasks.Task<string> OpenTCPStreamingClientAsync(string ipAddress, string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ConnectToStreamingServer", ReplyAction="http://tempuri.org/IService/ConnectToStreamingServerResponse")]
        void ConnectToStreamingServer(string ipAddress, string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ConnectToStreamingServer", ReplyAction="http://tempuri.org/IService/ConnectToStreamingServerResponse")]
        System.Threading.Tasks.Task ConnectToStreamingServerAsync(string ipAddress, string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/StartWatch", ReplyAction="http://tempuri.org/IService/StartWatchResponse")]
        string StartWatch(string PathToWatch, string Filter, bool IncludeSubdirectories, string fileOwnerUserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/StartWatch", ReplyAction="http://tempuri.org/IService/StartWatchResponse")]
        System.Threading.Tasks.Task<string> StartWatchAsync(string PathToWatch, string Filter, bool IncludeSubdirectories, string fileOwnerUserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetWatsonRunning", ReplyAction="http://tempuri.org/IService/SetWatsonRunningResponse")]
        string SetWatsonRunning(bool set);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetWatsonRunning", ReplyAction="http://tempuri.org/IService/SetWatsonRunningResponse")]
        System.Threading.Tasks.Task<string> SetWatsonRunningAsync(bool set);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/StartWatchWrongFiles", ReplyAction="http://tempuri.org/IService/StartWatchWrongFilesResponse")]
        string StartWatchWrongFiles(string PathToWatch, bool IncludeSubdirectories);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/StartWatchWrongFiles", ReplyAction="http://tempuri.org/IService/StartWatchWrongFilesResponse")]
        System.Threading.Tasks.Task<string> StartWatchWrongFilesAsync(string PathToWatch, bool IncludeSubdirectories);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getGuild", ReplyAction="http://tempuri.org/IService/getGuildResponse")]
        string getGuild();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getGuild", ReplyAction="http://tempuri.org/IService/getGuildResponse")]
        System.Threading.Tasks.Task<string> getGuildAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SyncFilesWithDataBase", ReplyAction="http://tempuri.org/IService/SyncFilesWithDataBaseResponse")]
        int SyncFilesWithDataBase(string DirectoryToSync, bool recoursive, string userName, int SyncBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SyncFilesWithDataBase", ReplyAction="http://tempuri.org/IService/SyncFilesWithDataBaseResponse")]
        System.Threading.Tasks.Task<int> SyncFilesWithDataBaseAsync(string DirectoryToSync, bool recoursive, string userName, int SyncBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/StopWatchWrongFiles", ReplyAction="http://tempuri.org/IService/StopWatchWrongFilesResponse")]
        string StopWatchWrongFiles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/StopWatchWrongFiles", ReplyAction="http://tempuri.org/IService/StopWatchWrongFilesResponse")]
        System.Threading.Tasks.Task<string> StopWatchWrongFilesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CloseDropBoxConnection", ReplyAction="http://tempuri.org/IService/CloseDropBoxConnectionResponse")]
        void CloseDropBoxConnection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CloseDropBoxConnection", ReplyAction="http://tempuri.org/IService/CloseDropBoxConnectionResponse")]
        System.Threading.Tasks.Task CloseDropBoxConnectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InitiateSingleUpload", ReplyAction="http://tempuri.org/IService/InitiateSingleUploadResponse")]
        string InitiateSingleUpload();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InitiateSingleUpload", ReplyAction="http://tempuri.org/IService/InitiateSingleUploadResponse")]
        System.Threading.Tasks.Task<string> InitiateSingleUploadAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetCopyThreadTimeEvent", ReplyAction="http://tempuri.org/IService/SetCopyThreadTimeEventResponse")]
        void SetCopyThreadTimeEvent(System.TimeSpan t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetCopyThreadTimeEvent", ReplyAction="http://tempuri.org/IService/SetCopyThreadTimeEventResponse")]
        System.Threading.Tasks.Task SetCopyThreadTimeEventAsync(System.TimeSpan t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CleanFifoHandler", ReplyAction="http://tempuri.org/IService/CleanFifoHandlerResponse")]
        void CleanFifoHandler();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CleanFifoHandler", ReplyAction="http://tempuri.org/IService/CleanFifoHandlerResponse")]
        System.Threading.Tasks.Task CleanFifoHandlerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/StopWatch", ReplyAction="http://tempuri.org/IService/StopWatchResponse")]
        string StopWatch();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/StopWatch", ReplyAction="http://tempuri.org/IService/StopWatchResponse")]
        System.Threading.Tasks.Task<string> StopWatchAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DisconnectRepositoryStreamingClient", ReplyAction="http://tempuri.org/IService/DisconnectRepositoryStreamingClientResponse")]
        void DisconnectRepositoryStreamingClient();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DisconnectRepositoryStreamingClient", ReplyAction="http://tempuri.org/IService/DisconnectRepositoryStreamingClientResponse")]
        System.Threading.Tasks.Task DisconnectRepositoryStreamingClientAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Register", ReplyAction="http://tempuri.org/IService/RegisterResponse")]
        void Register(string serverIpAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Register", ReplyAction="http://tempuri.org/IService/RegisterResponse")]
        System.Threading.Tasks.Task RegisterAsync(string serverIpAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ConnectToFileServer", ReplyAction="http://tempuri.org/IService/ConnectToFileServerResponse")]
        string ConnectToFileServer(string ipAddress, string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ConnectToFileServer", ReplyAction="http://tempuri.org/IService/ConnectToFileServerResponse")]
        System.Threading.Tasks.Task<string> ConnectToFileServerAsync(string ipAddress, string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadFileToServer", ReplyAction="http://tempuri.org/IService/UploadFileToServerResponse")]
        string UploadFileToServer(string FileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadFileToServer", ReplyAction="http://tempuri.org/IService/UploadFileToServerResponse")]
        System.Threading.Tasks.Task<string> UploadFileToServerAsync(string FileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Close", ReplyAction="http://tempuri.org/IService/CloseResponse")]
        string Close();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Close", ReplyAction="http://tempuri.org/IService/CloseResponse")]
        System.Threading.Tasks.Task<string> CloseAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RefreshFileList", ReplyAction="http://tempuri.org/IService/RefreshFileListResponse")]
        string[] RefreshFileList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RefreshFileList", ReplyAction="http://tempuri.org/IService/RefreshFileListResponse")]
        System.Threading.Tasks.Task<string[]> RefreshFileListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetStatistics", ReplyAction="http://tempuri.org/IService/GetStatisticsResponse")]
        string GetStatistics(string userName, bool byUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetStatistics", ReplyAction="http://tempuri.org/IService/GetStatisticsResponse")]
        System.Threading.Tasks.Task<string> GetStatisticsAsync(string userName, bool byUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/StartWCFStreamingServer", ReplyAction="http://tempuri.org/IService/StartWCFStreamingServerResponse")]
        string StartWCFStreamingServer(string ipAddress, string storageFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/StartWCFStreamingServer", ReplyAction="http://tempuri.org/IService/StartWCFStreamingServerResponse")]
        System.Threading.Tasks.Task<string> StartWCFStreamingServerAsync(string ipAddress, string storageFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetFifoThreshold", ReplyAction="http://tempuri.org/IService/GetFifoThresholdResponse")]
        int GetFifoThreshold();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetFifoThreshold", ReplyAction="http://tempuri.org/IService/GetFifoThresholdResponse")]
        System.Threading.Tasks.Task<int> GetFifoThresholdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCopyThreadTimeEvent", ReplyAction="http://tempuri.org/IService/GetCopyThreadTimeEventResponse")]
        System.TimeSpan GetCopyThreadTimeEvent();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCopyThreadTimeEvent", ReplyAction="http://tempuri.org/IService/GetCopyThreadTimeEventResponse")]
        System.Threading.Tasks.Task<System.TimeSpan> GetCopyThreadTimeEventAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteAllWatsonGenerateFilesTimeSpanBeforeNow", ReplyAction="http://tempuri.org/IService/DeleteAllWatsonGenerateFilesTimeSpanBeforeNowResponse" +
            "")]
        string DeleteAllWatsonGenerateFilesTimeSpanBeforeNow(System.DateTime time, string userName, bool byUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteAllWatsonGenerateFilesTimeSpanBeforeNow", ReplyAction="http://tempuri.org/IService/DeleteAllWatsonGenerateFilesTimeSpanBeforeNowResponse" +
            "")]
        System.Threading.Tasks.Task<string> DeleteAllWatsonGenerateFilesTimeSpanBeforeNowAsync(System.DateTime time, string userName, bool byUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteAllUploadedFilesTimeSpanBeforeNow", ReplyAction="http://tempuri.org/IService/DeleteAllUploadedFilesTimeSpanBeforeNowResponse")]
        string DeleteAllUploadedFilesTimeSpanBeforeNow(System.DateTime time, string userName, bool byUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteAllUploadedFilesTimeSpanBeforeNow", ReplyAction="http://tempuri.org/IService/DeleteAllUploadedFilesTimeSpanBeforeNowResponse")]
        System.Threading.Tasks.Task<string> DeleteAllUploadedFilesTimeSpanBeforeNowAsync(System.DateTime time, string userName, bool byUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddDateToUploadTargetFolder", ReplyAction="http://tempuri.org/IService/AddDateToUploadTargetFolderResponse")]
        string AddDateToUploadTargetFolder(bool add);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddDateToUploadTargetFolder", ReplyAction="http://tempuri.org/IService/AddDateToUploadTargetFolderResponse")]
        System.Threading.Tasks.Task<string> AddDateToUploadTargetFolderAsync(bool add);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteAllUploadedFilesOnServer", ReplyAction="http://tempuri.org/IService/DeleteAllUploadedFilesOnServerResponse")]
        int DeleteAllUploadedFilesOnServer(string password, string userName, bool byUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteAllUploadedFilesOnServer", ReplyAction="http://tempuri.org/IService/DeleteAllUploadedFilesOnServerResponse")]
        System.Threading.Tasks.Task<int> DeleteAllUploadedFilesOnServerAsync(string password, string userName, bool byUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetWCFStreamingServerRepositoryFolder", ReplyAction="http://tempuri.org/IService/SetWCFStreamingServerRepositoryFolderResponse")]
        string SetWCFStreamingServerRepositoryFolder(string storageFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetWCFStreamingServerRepositoryFolder", ReplyAction="http://tempuri.org/IService/SetWCFStreamingServerRepositoryFolderResponse")]
        System.Threading.Tasks.Task<string> SetWCFStreamingServerRepositoryFolderAsync(string storageFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetFifoThreshold", ReplyAction="http://tempuri.org/IService/SetFifoThresholdResponse")]
        string SetFifoThreshold(int depth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetFifoThreshold", ReplyAction="http://tempuri.org/IService/SetFifoThresholdResponse")]
        System.Threading.Tasks.Task<string> SetFifoThresholdAsync(int depth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DropBoxInitialize", ReplyAction="http://tempuri.org/IService/DropBoxInitializeResponse")]
        string DropBoxInitialize();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DropBoxInitialize", ReplyAction="http://tempuri.org/IService/DropBoxInitializeResponse")]
        System.Threading.Tasks.Task<string> DropBoxInitializeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DropBoxClose", ReplyAction="http://tempuri.org/IService/DropBoxCloseResponse")]
        string DropBoxClose();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DropBoxClose", ReplyAction="http://tempuri.org/IService/DropBoxCloseResponse")]
        System.Threading.Tasks.Task<string> DropBoxCloseAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DropBoxUpload", ReplyAction="http://tempuri.org/IService/DropBoxUploadResponse")]
        string DropBoxUpload(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DropBoxUpload", ReplyAction="http://tempuri.org/IService/DropBoxUploadResponse")]
        System.Threading.Tasks.Task<string> DropBoxUploadAsync(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteAllFilesFromFieldDaysBefore", ReplyAction="http://tempuri.org/IService/DeleteAllFilesFromFieldDaysBeforeResponse")]
        string DeleteAllFilesFromFieldDaysBefore(int days, string password, string userName, bool byUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteAllFilesFromFieldDaysBefore", ReplyAction="http://tempuri.org/IService/DeleteAllFilesFromFieldDaysBeforeResponse")]
        System.Threading.Tasks.Task<string> DeleteAllFilesFromFieldDaysBeforeAsync(int days, string password, string userName, bool byUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteAllFilesFromFieldBetweenDates", ReplyAction="http://tempuri.org/IService/DeleteAllFilesFromFieldBetweenDatesResponse")]
        string DeleteAllFilesFromFieldBetweenDates(System.DateTime start, System.DateTime end, bool includeTime, string password, string userName, bool byUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteAllFilesFromFieldBetweenDates", ReplyAction="http://tempuri.org/IService/DeleteAllFilesFromFieldBetweenDatesResponse")]
        System.Threading.Tasks.Task<string> DeleteAllFilesFromFieldBetweenDatesAsync(System.DateTime start, System.DateTime end, bool includeTime, string password, string userName, bool byUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteAllFilesFromFieldStartingFromDate", ReplyAction="http://tempuri.org/IService/DeleteAllFilesFromFieldStartingFromDateResponse")]
        string DeleteAllFilesFromFieldStartingFromDate(System.DateTime startingFrom, string password, string userName, bool byUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteAllFilesFromFieldStartingFromDate", ReplyAction="http://tempuri.org/IService/DeleteAllFilesFromFieldStartingFromDateResponse")]
        System.Threading.Tasks.Task<string> DeleteAllFilesFromFieldStartingFromDateAsync(System.DateTime startingFrom, string password, string userName, bool byUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/StartDropBoxUploadMode", ReplyAction="http://tempuri.org/IService/StartDropBoxUploadModeResponse")]
        void StartDropBoxUploadMode(bool start);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/StartDropBoxUploadMode", ReplyAction="http://tempuri.org/IService/StartDropBoxUploadModeResponse")]
        System.Threading.Tasks.Task StartDropBoxUploadModeAsync(bool start);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RunBoxInitialize", ReplyAction="http://tempuri.org/IService/RunBoxInitializeResponse")]
        void RunBoxInitialize();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RunBoxInitialize", ReplyAction="http://tempuri.org/IService/RunBoxInitializeResponse")]
        System.Threading.Tasks.Task RunBoxInitializeAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/NotifyCallbackMessage")]
        void NotifyCallbackMessage(string fieldGuid, string ipAddress, int code, string Msg, System.DateTime startTime, string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/NotifyDataCallback")]
        void NotifyDataCallback(string fieldGuid, string ipAddress, byte[] buf, int size, string userName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : GojiWCFStreamingBaseApi.ServiceReference1.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.DuplexClientBase<GojiWCFStreamingBaseApi.ServiceReference1.IService>, GojiWCFStreamingBaseApi.ServiceReference1.IService {
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string HelloWorld(string str) {
            return base.Channel.HelloWorld(str);
        }
        
        public System.Threading.Tasks.Task<string> HelloWorldAsync(string str) {
            return base.Channel.HelloWorldAsync(str);
        }
        
        public bool IsCopyThreadIsAlive() {
            return base.Channel.IsCopyThreadIsAlive();
        }
        
        public System.Threading.Tasks.Task<bool> IsCopyThreadIsAliveAsync() {
            return base.Channel.IsCopyThreadIsAliveAsync();
        }
        
        public void CloseCopyThread() {
            base.Channel.CloseCopyThread();
        }
        
        public System.Threading.Tasks.Task CloseCopyThreadAsync() {
            return base.Channel.CloseCopyThreadAsync();
        }
        
        public void Echo() {
            base.Channel.Echo();
        }
        
        public System.Threading.Tasks.Task EchoAsync() {
            return base.Channel.EchoAsync();
        }
        
        public string Ping() {
            return base.Channel.Ping();
        }
        
        public System.Threading.Tasks.Task<string> PingAsync() {
            return base.Channel.PingAsync();
        }
        
        public void SetVerbose(bool s) {
            base.Channel.SetVerbose(s);
        }
        
        public System.Threading.Tasks.Task SetVerboseAsync(bool s) {
            return base.Channel.SetVerboseAsync(s);
        }
        
        public System.IO.DriveInfo[] GetDrivesInfo() {
            return base.Channel.GetDrivesInfo();
        }
        
        public System.Threading.Tasks.Task<System.IO.DriveInfo[]> GetDrivesInfoAsync() {
            return base.Channel.GetDrivesInfoAsync();
        }
        
        public bool GetVerbose() {
            return base.Channel.GetVerbose();
        }
        
        public System.Threading.Tasks.Task<bool> GetVerboseAsync() {
            return base.Channel.GetVerboseAsync();
        }
        
        public string MarkLastFileAsUploaded(string TargetPath, string VirtualPath, ulong currentUploadedG360Index, string currentUploadedFileOwner, long currentSizeOfFile) {
            return base.Channel.MarkLastFileAsUploaded(TargetPath, VirtualPath, currentUploadedG360Index, currentUploadedFileOwner, currentSizeOfFile);
        }
        
        public System.Threading.Tasks.Task<string> MarkLastFileAsUploadedAsync(string TargetPath, string VirtualPath, ulong currentUploadedG360Index, string currentUploadedFileOwner, long currentSizeOfFile) {
            return base.Channel.MarkLastFileAsUploadedAsync(TargetPath, VirtualPath, currentUploadedG360Index, currentUploadedFileOwner, currentSizeOfFile);
        }
        
        public string GetCurrentUploadedFileInfo() {
            return base.Channel.GetCurrentUploadedFileInfo();
        }
        
        public System.Threading.Tasks.Task<string> GetCurrentUploadedFileInfoAsync() {
            return base.Channel.GetCurrentUploadedFileInfoAsync();
        }
        
        public string GetClientGuid() {
            return base.Channel.GetClientGuid();
        }
        
        public System.Threading.Tasks.Task<string> GetClientGuidAsync() {
            return base.Channel.GetClientGuidAsync();
        }
        
        public string OpenTCPStreamingClient(string ipAddress, string userName, string password) {
            return base.Channel.OpenTCPStreamingClient(ipAddress, userName, password);
        }
        
        public System.Threading.Tasks.Task<string> OpenTCPStreamingClientAsync(string ipAddress, string userName, string password) {
            return base.Channel.OpenTCPStreamingClientAsync(ipAddress, userName, password);
        }
        
        public void ConnectToStreamingServer(string ipAddress, string userName, string password) {
            base.Channel.ConnectToStreamingServer(ipAddress, userName, password);
        }
        
        public System.Threading.Tasks.Task ConnectToStreamingServerAsync(string ipAddress, string userName, string password) {
            return base.Channel.ConnectToStreamingServerAsync(ipAddress, userName, password);
        }
        
        public string StartWatch(string PathToWatch, string Filter, bool IncludeSubdirectories, string fileOwnerUserName) {
            return base.Channel.StartWatch(PathToWatch, Filter, IncludeSubdirectories, fileOwnerUserName);
        }
        
        public System.Threading.Tasks.Task<string> StartWatchAsync(string PathToWatch, string Filter, bool IncludeSubdirectories, string fileOwnerUserName) {
            return base.Channel.StartWatchAsync(PathToWatch, Filter, IncludeSubdirectories, fileOwnerUserName);
        }
        
        public string SetWatsonRunning(bool set) {
            return base.Channel.SetWatsonRunning(set);
        }
        
        public System.Threading.Tasks.Task<string> SetWatsonRunningAsync(bool set) {
            return base.Channel.SetWatsonRunningAsync(set);
        }
        
        public string StartWatchWrongFiles(string PathToWatch, bool IncludeSubdirectories) {
            return base.Channel.StartWatchWrongFiles(PathToWatch, IncludeSubdirectories);
        }
        
        public System.Threading.Tasks.Task<string> StartWatchWrongFilesAsync(string PathToWatch, bool IncludeSubdirectories) {
            return base.Channel.StartWatchWrongFilesAsync(PathToWatch, IncludeSubdirectories);
        }
        
        public string getGuild() {
            return base.Channel.getGuild();
        }
        
        public System.Threading.Tasks.Task<string> getGuildAsync() {
            return base.Channel.getGuildAsync();
        }
        
        public int SyncFilesWithDataBase(string DirectoryToSync, bool recoursive, string userName, int SyncBy) {
            return base.Channel.SyncFilesWithDataBase(DirectoryToSync, recoursive, userName, SyncBy);
        }
        
        public System.Threading.Tasks.Task<int> SyncFilesWithDataBaseAsync(string DirectoryToSync, bool recoursive, string userName, int SyncBy) {
            return base.Channel.SyncFilesWithDataBaseAsync(DirectoryToSync, recoursive, userName, SyncBy);
        }
        
        public string StopWatchWrongFiles() {
            return base.Channel.StopWatchWrongFiles();
        }
        
        public System.Threading.Tasks.Task<string> StopWatchWrongFilesAsync() {
            return base.Channel.StopWatchWrongFilesAsync();
        }
        
        public void CloseDropBoxConnection() {
            base.Channel.CloseDropBoxConnection();
        }
        
        public System.Threading.Tasks.Task CloseDropBoxConnectionAsync() {
            return base.Channel.CloseDropBoxConnectionAsync();
        }
        
        public string InitiateSingleUpload() {
            return base.Channel.InitiateSingleUpload();
        }
        
        public System.Threading.Tasks.Task<string> InitiateSingleUploadAsync() {
            return base.Channel.InitiateSingleUploadAsync();
        }
        
        public void SetCopyThreadTimeEvent(System.TimeSpan t) {
            base.Channel.SetCopyThreadTimeEvent(t);
        }
        
        public System.Threading.Tasks.Task SetCopyThreadTimeEventAsync(System.TimeSpan t) {
            return base.Channel.SetCopyThreadTimeEventAsync(t);
        }
        
        public void CleanFifoHandler() {
            base.Channel.CleanFifoHandler();
        }
        
        public System.Threading.Tasks.Task CleanFifoHandlerAsync() {
            return base.Channel.CleanFifoHandlerAsync();
        }
        
        public string StopWatch() {
            return base.Channel.StopWatch();
        }
        
        public System.Threading.Tasks.Task<string> StopWatchAsync() {
            return base.Channel.StopWatchAsync();
        }
        
        public void DisconnectRepositoryStreamingClient() {
            base.Channel.DisconnectRepositoryStreamingClient();
        }
        
        public System.Threading.Tasks.Task DisconnectRepositoryStreamingClientAsync() {
            return base.Channel.DisconnectRepositoryStreamingClientAsync();
        }
        
        public void Register(string serverIpAddress) {
            base.Channel.Register(serverIpAddress);
        }
        
        public System.Threading.Tasks.Task RegisterAsync(string serverIpAddress) {
            return base.Channel.RegisterAsync(serverIpAddress);
        }
        
        public string ConnectToFileServer(string ipAddress, string UserName, string Password) {
            return base.Channel.ConnectToFileServer(ipAddress, UserName, Password);
        }
        
        public System.Threading.Tasks.Task<string> ConnectToFileServerAsync(string ipAddress, string UserName, string Password) {
            return base.Channel.ConnectToFileServerAsync(ipAddress, UserName, Password);
        }
        
        public string UploadFileToServer(string FileName) {
            return base.Channel.UploadFileToServer(FileName);
        }
        
        public System.Threading.Tasks.Task<string> UploadFileToServerAsync(string FileName) {
            return base.Channel.UploadFileToServerAsync(FileName);
        }
        
        public string Close() {
            return base.Channel.Close();
        }
        
        public System.Threading.Tasks.Task<string> CloseAsync() {
            return base.Channel.CloseAsync();
        }
        
        public string[] RefreshFileList() {
            return base.Channel.RefreshFileList();
        }
        
        public System.Threading.Tasks.Task<string[]> RefreshFileListAsync() {
            return base.Channel.RefreshFileListAsync();
        }
        
        public string GetStatistics(string userName, bool byUser) {
            return base.Channel.GetStatistics(userName, byUser);
        }
        
        public System.Threading.Tasks.Task<string> GetStatisticsAsync(string userName, bool byUser) {
            return base.Channel.GetStatisticsAsync(userName, byUser);
        }
        
        public string StartWCFStreamingServer(string ipAddress, string storageFolder) {
            return base.Channel.StartWCFStreamingServer(ipAddress, storageFolder);
        }
        
        public System.Threading.Tasks.Task<string> StartWCFStreamingServerAsync(string ipAddress, string storageFolder) {
            return base.Channel.StartWCFStreamingServerAsync(ipAddress, storageFolder);
        }
        
        public int GetFifoThreshold() {
            return base.Channel.GetFifoThreshold();
        }
        
        public System.Threading.Tasks.Task<int> GetFifoThresholdAsync() {
            return base.Channel.GetFifoThresholdAsync();
        }
        
        public System.TimeSpan GetCopyThreadTimeEvent() {
            return base.Channel.GetCopyThreadTimeEvent();
        }
        
        public System.Threading.Tasks.Task<System.TimeSpan> GetCopyThreadTimeEventAsync() {
            return base.Channel.GetCopyThreadTimeEventAsync();
        }
        
        public string DeleteAllWatsonGenerateFilesTimeSpanBeforeNow(System.DateTime time, string userName, bool byUser) {
            return base.Channel.DeleteAllWatsonGenerateFilesTimeSpanBeforeNow(time, userName, byUser);
        }
        
        public System.Threading.Tasks.Task<string> DeleteAllWatsonGenerateFilesTimeSpanBeforeNowAsync(System.DateTime time, string userName, bool byUser) {
            return base.Channel.DeleteAllWatsonGenerateFilesTimeSpanBeforeNowAsync(time, userName, byUser);
        }
        
        public string DeleteAllUploadedFilesTimeSpanBeforeNow(System.DateTime time, string userName, bool byUser) {
            return base.Channel.DeleteAllUploadedFilesTimeSpanBeforeNow(time, userName, byUser);
        }
        
        public System.Threading.Tasks.Task<string> DeleteAllUploadedFilesTimeSpanBeforeNowAsync(System.DateTime time, string userName, bool byUser) {
            return base.Channel.DeleteAllUploadedFilesTimeSpanBeforeNowAsync(time, userName, byUser);
        }
        
        public string AddDateToUploadTargetFolder(bool add) {
            return base.Channel.AddDateToUploadTargetFolder(add);
        }
        
        public System.Threading.Tasks.Task<string> AddDateToUploadTargetFolderAsync(bool add) {
            return base.Channel.AddDateToUploadTargetFolderAsync(add);
        }
        
        public int DeleteAllUploadedFilesOnServer(string password, string userName, bool byUser) {
            return base.Channel.DeleteAllUploadedFilesOnServer(password, userName, byUser);
        }
        
        public System.Threading.Tasks.Task<int> DeleteAllUploadedFilesOnServerAsync(string password, string userName, bool byUser) {
            return base.Channel.DeleteAllUploadedFilesOnServerAsync(password, userName, byUser);
        }
        
        public string SetWCFStreamingServerRepositoryFolder(string storageFolder) {
            return base.Channel.SetWCFStreamingServerRepositoryFolder(storageFolder);
        }
        
        public System.Threading.Tasks.Task<string> SetWCFStreamingServerRepositoryFolderAsync(string storageFolder) {
            return base.Channel.SetWCFStreamingServerRepositoryFolderAsync(storageFolder);
        }
        
        public string SetFifoThreshold(int depth) {
            return base.Channel.SetFifoThreshold(depth);
        }
        
        public System.Threading.Tasks.Task<string> SetFifoThresholdAsync(int depth) {
            return base.Channel.SetFifoThresholdAsync(depth);
        }
        
        public string DropBoxInitialize() {
            return base.Channel.DropBoxInitialize();
        }
        
        public System.Threading.Tasks.Task<string> DropBoxInitializeAsync() {
            return base.Channel.DropBoxInitializeAsync();
        }
        
        public string DropBoxClose() {
            return base.Channel.DropBoxClose();
        }
        
        public System.Threading.Tasks.Task<string> DropBoxCloseAsync() {
            return base.Channel.DropBoxCloseAsync();
        }
        
        public string DropBoxUpload(string fileName) {
            return base.Channel.DropBoxUpload(fileName);
        }
        
        public System.Threading.Tasks.Task<string> DropBoxUploadAsync(string fileName) {
            return base.Channel.DropBoxUploadAsync(fileName);
        }
        
        public string DeleteAllFilesFromFieldDaysBefore(int days, string password, string userName, bool byUser) {
            return base.Channel.DeleteAllFilesFromFieldDaysBefore(days, password, userName, byUser);
        }
        
        public System.Threading.Tasks.Task<string> DeleteAllFilesFromFieldDaysBeforeAsync(int days, string password, string userName, bool byUser) {
            return base.Channel.DeleteAllFilesFromFieldDaysBeforeAsync(days, password, userName, byUser);
        }
        
        public string DeleteAllFilesFromFieldBetweenDates(System.DateTime start, System.DateTime end, bool includeTime, string password, string userName, bool byUser) {
            return base.Channel.DeleteAllFilesFromFieldBetweenDates(start, end, includeTime, password, userName, byUser);
        }
        
        public System.Threading.Tasks.Task<string> DeleteAllFilesFromFieldBetweenDatesAsync(System.DateTime start, System.DateTime end, bool includeTime, string password, string userName, bool byUser) {
            return base.Channel.DeleteAllFilesFromFieldBetweenDatesAsync(start, end, includeTime, password, userName, byUser);
        }
        
        public string DeleteAllFilesFromFieldStartingFromDate(System.DateTime startingFrom, string password, string userName, bool byUser) {
            return base.Channel.DeleteAllFilesFromFieldStartingFromDate(startingFrom, password, userName, byUser);
        }
        
        public System.Threading.Tasks.Task<string> DeleteAllFilesFromFieldStartingFromDateAsync(System.DateTime startingFrom, string password, string userName, bool byUser) {
            return base.Channel.DeleteAllFilesFromFieldStartingFromDateAsync(startingFrom, password, userName, byUser);
        }
        
        public void StartDropBoxUploadMode(bool start) {
            base.Channel.StartDropBoxUploadMode(start);
        }
        
        public System.Threading.Tasks.Task StartDropBoxUploadModeAsync(bool start) {
            return base.Channel.StartDropBoxUploadModeAsync(start);
        }
        
        public void RunBoxInitialize() {
            base.Channel.RunBoxInitialize();
        }
        
        public System.Threading.Tasks.Task RunBoxInitializeAsync() {
            return base.Channel.RunBoxInitializeAsync();
        }
    }
}
